
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20.0.0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ICellbioRpy"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ICellbioRpy')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("configure_python_env")
> ### * configure_python_env
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: configure_python_env
> ### Title: Configure Python Environment for anndata
> ### Aliases: configure_python_env
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Use current Python environment (default)
> ##D configure_python_env()
> ##D 
> ##D # Use specific conda environment
> ##D configure_python_env(conda_env = "your_env_name")
> ##D 
> ##D # Use specific Python path
> ##D configure_python_env(python_path = "/usr/local/bin/python3")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("h5ad_to_Seurat")
> ### * h5ad_to_Seurat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: h5ad_to_seurat
> ### Title: Convert h5ad file to Seurat object
> ### Aliases: h5ad_to_seurat
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Convert h5ad to Seurat
> ##D seurat_obj <- h5ad_to_seurat("data.h5ad")
> ##D 
> ##D # Use X matrix as counts instead of logcounts
> ##D seurat_obj <- h5ad_to_seurat("data.h5ad", use_x_as = "counts")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("h5ad_to_sce")
> ### * h5ad_to_sce
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: h5ad_to_sce
> ### Title: Convert h5ad file to SingleCellExperiment object
> ### Aliases: h5ad_to_sce
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Convert h5ad to SingleCellExperiment
> ##D sce <- h5ad_to_sce("data.h5ad")
> ##D 
> ##D # Use X matrix as counts instead of logcounts
> ##D sce <- h5ad_to_sce("data.h5ad", use_x_as = "counts")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("iCellbio2H5ad")
> ### * iCellbio2H5ad
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iCellbio2H5ad
> ### Title: Convert 1Cellbio zip file to h5ad format
> ### Aliases: iCellbio2H5ad
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Basic usage
> ##D iCellbio2H5ad("path/to/1Cellbio_results.zip", "output.h5ad")
> ##D 
> ##D # With custom temporary directory
> ##D iCellbio2H5ad("path/to/1Cellbio_results.zip", "output.h5ad",
> ##D               temp_dir = "/custom/temp")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("read1Cellbio")
> ### * read1Cellbio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read1Cellbio
> ### Title: Read 1Cellbio results from zip file
> ### Aliases: read1Cellbio
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data <- read1Cellbio("path/to/results.zip")
> ##D sce <- as.SingleCellExperiment(data)
> ##D seurat <- as.Seurat(data)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("seurat_to_h5ad")
> ### * seurat_to_h5ad
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seurat_to_h5ad
> ### Title: Convert Seurat object to h5ad file
> ### Aliases: seurat_to_h5ad
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Convert Seurat object to h5ad
> ##D seurat_to_h5ad(seurat_obj, "output.h5ad")
> ##D 
> ##D # Use counts instead of data
> ##D seurat_to_h5ad(seurat_obj, "output.h5ad", layer = "counts")
> ##D 
> ##D # Specify different default assay
> ##D seurat_to_h5ad(seurat_obj, "output.h5ad", default_assay = "SCT")
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.711 0.281 5.008 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
